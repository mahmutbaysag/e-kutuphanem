<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMMOAADDDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAQAAABIAAABCAAAAagAAAEYAAAAeAAAABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAABAAAAFAAAAEYAAACMAAAAzgAAAPQAAAD8AAAA8wAAAOAAAAC3AAAAgQAAAEwAAAAiAAAACAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAIAAAAXAAAASwAAAJIAAADSAAAA8AAAAOIAAACyAAAAcgAAAJwAAAB0AAAAhwAAAL8AAADmAAAA8wAA
        AOQAAAC9AAAAiAAAAFIAAAAmAAAACwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAA
        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
        AGYAAAAwAAAADQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcgAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAkAAAAkAAAATwAAAIQAAAC5AAAA4wAAAPsAAAD/AAAA/wAAAMEAAABdAAAAAAAAAH8AAACzAAAARQAA
        ABkAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAB5AAAARgAAAAMAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkAAAAjAAAATQAAAIsAAADdAAAArQAAAF0AAAATAAAAuQAA
        AD8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAACEAAABaAAAAoAAAAOMAAADdAAAAsgAA
        AIcAAABaAAAAMgAAABUAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHAAAAIQAAAAKAAAAAAAA
        ACYAAAC/AAAAIQAAAAAAAAAAAAAAAAAAAAAAAAAFAAAAJAAAAF4AAAClAAAA3gAAAPsAAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAPwAAADuAAAA0wAAAK0AAACAAAAAVAAAAC4AAAASAAAAAwAAAAAAAAAaAAAAgAAA
        AAYAAAAAAAAAJAAAAMIAAAAnAAAAAAAAAAYAAAAnAAAAYwAAAKkAAADhAAAA/AAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD7AAAA6wAAAM4AAACnAAAAegAA
        AFcAAACfAAAAKAAAAAAAAAAMAAAAsQAAAJAAAABpAAAArgAAAOQAAAD8AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA+wAAAPoAAADIAAAAQwAAAAAAAABAAAAAywAAAPAAAAD9AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP0AAADoAAAAuQAAAHoAAAAqAAAAAAAAAAAAAAAWAAAANAAAAE0AAABrAAAAigAA
        AKgAAADDAAAA2gAAAOwAAAD4AAAA/gAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA+QAAANsAAAClAAAAZAAAACsAAAAJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAwAAAAwAAAAbAAAALwAAAEgAAABlAAAAhAAAAKIAAAC+AAAA1gAAAOkAAAD2AAAA/gAA
        AP8AAADyAAAAzAAAAJEAAABQAAAAHQAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAoAAAAXAAAAKgAA
        AEMAAABgAAAAbQAAAD4AAAASAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/////////////////8B///4AB//wAAB/gAkAAwB58AAH+P8AP4AH4zwA
        ACMgAAADAAEgAQAfPgEB/h/Bj8AD+IgAAHiAAAAIAASAAAB8+ACD+H+AH8AD8R4AABEQAAABAAAAAIAA
        AADAAAAD/gAAH//8AP////////////////8=
</value>
  </data>
</root>